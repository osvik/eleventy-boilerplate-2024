{% macro bar(id = 'altri', correction = 0, goal = 500000, ctxt = '') %}
    <style>
        .counter-greenpeace progress {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            width: 100%;
            height: 20px;
            background-color: #eee;
            border-radius: 2px;
        }

        .counter-greenpeace progress::-webkit-progress-bar {
            background-color: var(--second-bg-color);
            border-radius: 2px;
        }
        .counter-greenpeace progress::-webkit-progress-value {
            background-color: var(--progress-bar-color);
            border-radius: 2px;
        }
        .counter-greenpeace progress::-moz-progress-bar {
            background-color: var(--progress-bar-color);
            border-radius: 2px;
        }

        .counter-greenpeace label, .counter-greenpeace progress {
            display: block;
            margin: 5px 0;
        }

    </style>
    <div class="counter-greenpeace" x-init="get_signups();" x-data="{
        id: '{{ id }}',
        correction: {{ correction }},
        counter: 0,
        goal: {{ goal }},
        percentage(){
            const ratio = (this.counter + this.correction) / this.goal * 100;
            const rounded_ratio = parseInt(ratio, 10);
            return rounded_ratio + '%';
        },
        maskNumber(number) {
            let numStr = number.toString();
            let parts = numStr.split('.');
            let integerPart = parts[0];
            let decimalPart = parts.length > 1 ? '.' + parts[1] : '';        
            let maskedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');        
            return maskedInteger + decimalPart;
        },
        async get_signups() {
            try {
                let counter_url = new URL('https://counter.greenpeace.org/signups');
                counter_url.searchParams.set('id', this.id);
                const response = await fetch(counter_url.href);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                this.id = data.id;
                this.counter = data.unique_count;
            } catch (error) {
                console.error('The Greenpeace counter is not working. Error=' + error);
                gtag('event', 'exception', {
                    'description': 'The Greenpeace counter is not working. Error=' + error,
                    'fatal': false
                });
            }
        }
    }">

        <label for="{{ id }}"><span x-text="maskNumber(counter + correction)"></span> {{ ctxt }} <span x-text="maskNumber(goal);"></span>!</label>
        <progress id="{{ id }}" x-bind:value="counter + correction" x-bind:max="goal" x-text="percentage"> 0% </progress>

    </div>
{% endmacro %}